// Chatbot JavaScript
class Chatbot {
    constructor() {
        this.isOpen = false;
        this.isTyping = false;
        this.messages = [];
        this.suggestions = [
            'Xin ch√†o',
            'T√¥i c·∫ßn h·ªó tr·ª£',
            'Th√¥ng tin s·∫£n ph·∫©m',
            'ƒê·∫∑t h√†ng nh∆∞ th·∫ø n√†o?',
            'Ch√≠nh s√°ch ƒë·ªïi tr·∫£',
            'Li√™n h·ªá t∆∞ v·∫•n'
        ];
        
        this.responses = {
            'xin ch√†o': 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Winstar. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m, ƒë·∫∑t h√†ng, ho·∫∑c h·ªó tr·ª£ kh√°c. B·∫°n c·∫ßn g√¨ kh√¥ng?',
            't√¥i c·∫ßn h·ªó tr·ª£': 'T√¥i r·∫•t s·∫µn l√≤ng h·ªó tr·ª£ b·∫°n! B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i kh√¥ng?',
            'th√¥ng tin s·∫£n ph·∫©m': 'Ch√∫ng t√¥i c√≥ nhi·ªÅu s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao. B·∫°n quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o c·ª• th·ªÉ? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu chi ti·∫øt.',
            'ƒë·∫∑t h√†ng nh∆∞ th·∫ø n√†o': 'ƒê·ªÉ ƒë·∫∑t h√†ng, b·∫°n c√≥ th·ªÉ:\n1. Ch·ªçn s·∫£n ph·∫©m t·ª´ danh m·ª•c\n2. Th√™m v√†o gi·ªè h√†ng\n3. ƒêi·ªÅn th√¥ng tin giao h√†ng\n4. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n5. X√°c nh·∫≠n ƒë∆°n h√†ng\nB·∫°n c·∫ßn h·ªó tr·ª£ th√™m g√¨ kh√¥ng?',
            'ch√≠nh s√°ch ƒë·ªïi tr·∫£': 'Ch√∫ng t√¥i c√≥ ch√≠nh s√°ch ƒë·ªïi tr·∫£ trong v√≤ng 30 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng. S·∫£n ph·∫©m ph·∫£i c√≤n nguy√™n v·∫πn v√† ƒë·∫ßy ƒë·ªß ph·ª• ki·ªán. B·∫°n c√≥ c·∫ßn t∆∞ v·∫•n th√™m kh√¥ng?',
            'li√™n h·ªá t∆∞ v·∫•n': 'B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:\nüìû Hotline: 1900-xxxx\nüìß Email: support@winstar.com\nüí¨ Chat tr·ª±c tuy·∫øn (nh∆∞ hi·ªán t·∫°i)\n‚è∞ Gi·ªù l√†m vi·ªác: 8h-22h h√†ng ng√†y'
        };
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.loadChatHistory();
        this.showSuggestions();
    }
    
    bindEvents() {
        // Toggle chatbot
        const toggleBtn = document.getElementById('chatWidgetToggle');
        const closeBtn = document.getElementById('closeChatWidget');
        const chatWidget = document.getElementById('chatWidget');
        
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggleChat());
        }
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeChat());
        }
        
        // Send message
        const sendBtn = document.getElementById('widgetSendBtn');
        const messageInput = document.getElementById('widgetMessageInput');
        
        if (sendBtn) {
            sendBtn.addEventListener('click', () => this.sendMessage());
        }
        
        if (messageInput) {
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.sendMessage();
                }
            });
        }
        
        // Suggestion buttons
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('suggestion-btn')) {
                const text = e.target.textContent;
                this.addMessage(text, 'user');
                this.processMessage(text);
            }
        });
    }
    
    async loadChatHistory() {
        try {
            const response = await fetch('/chat/history', {
                method: 'GET',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json',
                },
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.messages.length > 0) {
                    this.messages = data.messages;
                    this.displayChatHistory();
                }
            }
        } catch (error) {
            console.error('Error loading chat history:', error);
        }
    }
    
    displayChatHistory() {
        const messagesContainer = document.getElementById('chatWidgetMessages');
        if (!messagesContainer) return;
        
        // Clear existing messages except welcome message
        const welcomeMessage = messagesContainer.querySelector('.welcome-message');
        messagesContainer.innerHTML = '';
        if (welcomeMessage) {
            messagesContainer.appendChild(welcomeMessage);
        }
        
        // Display chat history
        this.messages.forEach(msg => {
            this.addMessageToDOM(msg.message, msg.sender, msg.timestamp);
        });
        
        this.scrollToBottom();
    }
    
    toggleChat() {
        const chatWidget = document.getElementById('chatWidget');
        const toggleBtn = document.getElementById('chatWidgetToggle');
        
        if (this.isOpen) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }
    
    openChat() {
        const chatWidget = document.getElementById('chatWidget');
        const toggleBtn = document.getElementById('chatWidgetToggle');
        
        if (chatWidget && toggleBtn) {
            chatWidget.classList.add('active');
            toggleBtn.classList.add('hidden');
            this.isOpen = true;
            
            // Mark messages as read when opening chat
            this.markMessagesAsRead();
            
            // Focus on input
            setTimeout(() => {
                const messageInput = document.getElementById('widgetMessageInput');
                if (messageInput) {
                    messageInput.focus();
                }
            }, 300);
        }
    }
    
    closeChat() {
        const chatWidget = document.getElementById('chatWidget');
        const toggleBtn = document.getElementById('chatWidgetToggle');
        
        if (chatWidget && toggleBtn) {
            chatWidget.classList.remove('active');
            toggleBtn.classList.remove('hidden');
            this.isOpen = false;
        }
    }
    
    async sendMessage() {
        const messageInput = document.getElementById('widgetMessageInput');
        const message = messageInput.value.trim();
        
        if (message) {
            this.addMessage(message, 'user');
            messageInput.value = '';
            await this.sendMessageToServer(message);
        }
    }
    
    async sendMessageToServer(message) {
        try {
            const response = await fetch('/chat/send', {
                method: 'POST',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message }),
            });
            
            if (response.ok) {
                const data = await response.json();
                if (data.success) {
                    this.addMessage(data.response, 'bot');
                    this.showSuggestions();
                }
            } else {
                // Fallback to local processing if server fails
                this.processMessage(message);
            }
        } catch (error) {
            console.error('Error sending message:', error);
            // Fallback to local processing
            this.processMessage(message);
        }
    }
    
    addMessage(text, sender) {
        const time = new Date().toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        this.addMessageToDOM(text, sender, time);
        
        // Store message
        this.messages.push({
            text: text,
            sender: sender,
            timestamp: time,
            date: new Date().toLocaleDateString('vi-VN')
        });
    }
    
    addMessageToDOM(text, sender, time) {
        const messagesContainer = document.getElementById('chatWidgetMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        messageDiv.innerHTML = `
            <div class="message-content">
                ${this.formatMessage(text)}
                <div class="message-time">${time}</div>
            </div>
        `;
        
        messagesContainer.appendChild(messageDiv);
        this.scrollToBottom();
    }
    
    formatMessage(text) {
        // Convert line breaks to <br> tags
        return text.replace(/\n/g, '<br>');
    }
    
    processMessage(message) {
        const lowerMessage = message.toLowerCase();
        
        // Show typing indicator
        this.showTypingIndicator();
        
        // Simulate processing delay
        setTimeout(() => {
            this.hideTypingIndicator();
            
            // Find matching response
            let response = this.getResponse(lowerMessage);
            
            if (!response) {
                response = 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi l·∫°i ho·∫∑c ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi.';
            }
            
            this.addMessage(response, 'bot');
            this.showSuggestions();
        }, 1000 + Math.random() * 1000); // Random delay between 1-2 seconds
    }
    
    getResponse(message) {
        // Check for exact matches first
        for (const [key, response] of Object.entries(this.responses)) {
            if (message.includes(key)) {
                return response;
            }
        }
        
        // Check for partial matches
        const words = message.split(' ');
        for (const word of words) {
            for (const [key, response] of Object.entries(this.responses)) {
                if (key.includes(word) || word.includes(key)) {
                    return response;
                }
            }
        }
        
        return null;
    }
    
    showTypingIndicator() {
        const messagesContainer = document.getElementById('chatWidgetMessages');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot typing-indicator-container';
        typingDiv.id = 'typingIndicator';
        
        typingDiv.innerHTML = `
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        `;
        
        messagesContainer.appendChild(typingDiv);
        this.scrollToBottom();
        this.isTyping = true;
    }
    
    hideTypingIndicator() {
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
        this.isTyping = false;
    }
    
    showSuggestions() {
        const messagesContainer = document.getElementById('chatWidgetMessages');
        
        // Remove existing suggestions
        const existingSuggestions = messagesContainer.querySelector('.suggestion-buttons');
        if (existingSuggestions) {
            existingSuggestions.remove();
        }
        
        // Add new suggestions
        const suggestionsDiv = document.createElement('div');
        suggestionsDiv.className = 'suggestion-buttons';
        
        const shuffledSuggestions = this.shuffleArray([...this.suggestions]);
        const selectedSuggestions = shuffledSuggestions.slice(0, 4); // Show only 4 suggestions
        
        selectedSuggestions.forEach(suggestion => {
            const btn = document.createElement('button');
            btn.className = 'suggestion-btn';
            btn.textContent = suggestion;
            suggestionsDiv.appendChild(btn);
        });
        
        messagesContainer.appendChild(suggestionsDiv);
        this.scrollToBottom();
    }
    
    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
    
    scrollToBottom() {
        const messagesContainer = document.getElementById('chatWidgetMessages');
        if (messagesContainer) {
            setTimeout(() => {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 100);
        }
    }
    
    async markMessagesAsRead() {
        try {
            const unreadMessages = this.messages.filter(msg => msg.sender === 'bot' && !msg.is_read);
            if (unreadMessages.length > 0) {
                const messageIds = unreadMessages.map(msg => msg.id);
                
                await fetch('/chat/mark-read', {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message_ids: messageIds }),
                });
                
                // Update local messages
                unreadMessages.forEach(msg => msg.is_read = true);
            }
        } catch (error) {
            console.error('Error marking messages as read:', error);
        }
    }
    
    async updateUnreadCount() {
        try {
            const response = await fetch('/chat/unread-count', {
                method: 'GET',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json',
                },
            });
            
            if (response.ok) {
                const data = await response.json();
                const badge = document.getElementById('widgetNotificationBadge');
                if (badge) {
                    if (data.count > 0) {
                        badge.textContent = data.count;
                        badge.style.display = 'flex';
                    } else {
                        badge.style.display = 'none';
                    }
                }
            }
        } catch (error) {
            console.error('Error updating unread count:', error);
        }
    }
    
    async clearChat() {
        try {
            const response = await fetch('/chat/clear', {
                method: 'DELETE',
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                    'Content-Type': 'application/json',
                },
            });
            
            if (response.ok) {
                const messagesContainer = document.getElementById('chatWidgetMessages');
                if (messagesContainer) {
                    // Keep only welcome message
                    const welcomeMessage = messagesContainer.querySelector('.welcome-message');
                    messagesContainer.innerHTML = '';
                    if (welcomeMessage) {
                        messagesContainer.appendChild(welcomeMessage);
                    }
                }
                this.messages = [];
                this.showSuggestions();
            }
        } catch (error) {
            console.error('Error clearing chat:', error);
        }
    }
    
    // Method to add custom responses
    addResponse(trigger, response) {
        this.responses[trigger.toLowerCase()] = response;
    }
    
    // Method to get chat history
    getChatHistory() {
        return this.messages;
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    window.chatbot = new Chatbot();
    
    // Add some custom responses
    chatbot.addResponse('c·∫£m ∆°n', 'Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi t√¥i nh√©!');
    chatbot.addResponse('t·∫°m bi·ªát', 'T·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!');
    chatbot.addResponse('gi√° c·∫£', 'Ch√∫ng t√¥i cam k·∫øt cung c·∫•p s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng v·ªõi gi√° c·∫£ c·∫°nh tranh nh·∫•t. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° tr√™n trang s·∫£n ph·∫©m ho·∫∑c li√™n h·ªá t∆∞ v·∫•n ƒë·ªÉ ƒë∆∞·ª£c b√°o gi√° c·ª• th·ªÉ.');
    chatbot.addResponse('giao h√†ng', 'Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc v·ªõi th·ªùi gian t·ª´ 1-3 ng√†y l√†m vi·ªác. Ph√≠ giao h√†ng t√πy thu·ªôc v√†o ƒë·ªãa ch·ªâ v√† ph∆∞∆°ng th·ª©c giao h√†ng b·∫°n ch·ªçn.');
    
    // Update unread count periodically
    setInterval(() => {
        chatbot.updateUnreadCount();
    }, 10000);
    
    // Auto-open chat after 30 seconds if user hasn't interacted
    setTimeout(() => {
        if (!chatbot.isOpen && !localStorage.getItem('chatbotOpened')) {
            chatbot.openChat();
            localStorage.setItem('chatbotOpened', 'true');
        }
    }, 30000);
});

// Export for use in other scripts
if (typeof module !== 'undefined' && module.exports) {
    module.exports = Chatbot;
} 